import logging
import os
import subprocess
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
CONTAINERS = [
    "grafana",
    "vm_control_bot_1", 
    "prometheus",
    "promtail",
    "nginx",
    "loki",
    "node-exporter"
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏", callback_data="manage_containers")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="status_all")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "manage_containers":
        await show_containers_list(query)
    elif data == "status_all":
        await status_all_containers(query)
    elif data.startswith("container_"):
        container_name = data.replace("container_", "")
        await show_container_actions(query, container_name)
    elif data.startswith("action_"):
        parts = data.split("_")
        container_name = parts[2]
        action = parts[1]
        await perform_container_action(query, container_name, action)

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
async def show_containers_list(query) -> None:
    keyboard = []
    
    for container in CONTAINERS:
        keyboard.append([InlineKeyboardButton(f"üì¶ {container}", callback_data=f"container_{container}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
async def show_container_actions(query, container_name: str) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    status = get_container_status(container_name)
    status_icon = "üü¢" if status == "running" else "üî¥" if status == "exited" else "‚ö´"
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action_start_{container_name}")],
        [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"action_stop_{container_name}")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action_restart_{container_name}")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data=f"action_status_{container_name}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="manage_containers")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {container_name}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_icon} {status}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
async def perform_container_action(query, container_name: str, action: str) -> None:
    try:
        if action == "start":
            result = subprocess.run(["docker", "start", container_name], capture_output=True, text=True)
            message = f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –∑–∞–ø—É—â–µ–Ω" if result.returncode == 0 else f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}"
        
        elif action == "stop":
            result = subprocess.run(["docker", "stop", container_name], capture_output=True, text=True)
            message = f"‚èπÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if result.returncode == 0 else f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}"
        
        elif action == "restart":
            result = subprocess.run(["docker", "restart", container_name], capture_output=True, text=True)
            message = f"üîÑ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω" if result.returncode == 0 else f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}"
        
        elif action == "status":
            status = get_container_status(container_name)
            status_icon = "üü¢" if status == "running" else "üî¥" if status == "exited" else "‚ö´"
            message = f"üì¶ {container_name}: {status_icon} {status}"
        
        await query.edit_message_text(message)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(2)
        await show_container_actions(query, container_name)
        
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
def get_container_status(container_name: str) -> str:
    try:
        result = subprocess.run(
            ["docker", "inspect", "--format", "{{.State.Status}}", container_name],
            capture_output=True, text=True
        )
        return result.stdout.strip() if result.returncode == 0 else "not found"
    except:
        return "error"

# –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
async def status_all_containers(query) -> None:
    status_text = "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:\n\n"
    
    for container in CONTAINERS:
        status = get_container_status(container)
        status_icon = "üü¢" if status == "running" else "üî¥" if status == "exited" else "‚ö´"
        status_text += f"{status_icon} {container}: {status}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(status_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_to_main(query) -> None:
    keyboard = [
        [InlineKeyboardButton("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏", callback_data="manage_containers")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="status_all")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if __name__ == '__main__':
    main()